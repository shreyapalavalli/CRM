//service/CustomerService.java

package com.sgc.crm.service;

import com.sgc.crm.entity.Customer;
import java.util.List;

public interface CustomerService {
    List<Customer> getAllCustomers();
    Customer getCustomerById(Long id);
    Customer saveCustomer(Customer customer);
    Customer updateCustomer(Long id, Customer customer);
    void deleteCustomer(Long id);
}


service/impl/CustomerServiceImpl.java
package com.sgc.crm.service.impl;

import com.sgc.crm.entity.Customer;
import com.sgc.crm.exception.ResourceNotFoundException;
import com.sgc.crm.repository.CustomerRepository;
import com.sgc.crm.service.CustomerService;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class CustomerServiceImpl implements CustomerService {

    private final CustomerRepository repository;

    public CustomerServiceImpl(CustomerRepository repository) {
        this.repository = repository;
    }

    @Override
    public List<Customer> getAllCustomers() {
        return repository.findAll();
    }

    @Override
    public Customer getCustomerById(Long id) {
        return repository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Customer not found with id: " + id));
    }

    @Override
    public Customer saveCustomer(Customer customer) {
        return repository.save(customer);
    }

    @Override
    public Customer updateCustomer(Long id, Customer updated) {
        Customer existing = getCustomerById(id);
        existing.setFullName(updated.getFullName());
        existing.setEmail(updated.getEmail());
        existing.setPhone(updated.getPhone());
        existing.setAddress(updated.getAddress());
        return repository.save(existing);
    }

    @Override
    public void deleteCustomer(Long id) {
        repository.deleteById(id);
    }
}

controller/CustomerController.java
package com.sgc.crm.controller;

import com.sgc.crm.entity.Customer;
import com.sgc.crm.service.CustomerService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/customers")
public class CustomerController {

    private final CustomerService service;

    public CustomerController(CustomerService service) {
        this.service = service;
    }

    @GetMapping
    public List<Customer> getAll() {
        return service.getAllCustomers();
    }

    @GetMapping("/{id}")
    public Customer getById(@PathVariable Long id) {
        return service.getCustomerById(id);
    }

    @PostMapping
    public Customer create(@RequestBody Customer customer) {
        return service.saveCustomer(customer);
    }

    @PutMapping("/{id}")
    public Customer update(@PathVariable Long id, @RequestBody Customer customer) {
        return service.updateCustomer(id, customer);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        service.deleteCustomer(id);
    }
}


TRANSACTIONS MODULE
service/TransactionService.java
package com.sgc.crm.service;

import com.sgc.crm.entity.Transaction;
import java.util.List;

public interface TransactionService {
    List<Transaction> getAllTransactions();
    Transaction getTransactionById(Long id);
    Transaction saveTransaction(Transaction transaction);
    Transaction updateTransaction(Long id, Transaction transaction);
    void deleteTransaction(Long id);
}

service/impl/TransactionServiceImpl.java
package com.sgc.crm.service.impl;

import com.sgc.crm.entity.Transaction;
import com.sgc.crm.exception.ResourceNotFoundException;
import com.sgc.crm.repository.TransactionRepository;
import com.sgc.crm.service.TransactionService;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TransactionServiceImpl implements TransactionService {

    private final TransactionRepository repository;

    public TransactionServiceImpl(TransactionRepository repository) {
        this.repository = repository;
    }

    @Override
    public List<Transaction> getAllTransactions() {
        return repository.findAll();
    }

    @Override
    public Transaction getTransactionById(Long id) {
        return repository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Transaction not found with id: " + id));
    }

    @Override
    public Transaction saveTransaction(Transaction transaction) {
        return repository.save(transaction);
    }

    @Override
    public Transaction updateTransaction(Long id, Transaction updated) {
        Transaction existing = getTransactionById(id);
        existing.setType(updated.getType());
        existing.setAmount(updated.getAmount());
        existing.setDate(updated.getDate());
        return repository.save(existing);
    }

    @Override
    public void deleteTransaction(Long id) {
        repository.deleteById(id);
    }
}

controller/TransactionController.java
package com.sgc.crm.controller;

import com.sgc.crm.entity.Transaction;
import com.sgc.crm.service.TransactionService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/transactions")
public class TransactionController {

    private final TransactionService service;

    public TransactionController(TransactionService service) {
        this.service = service;
    }

    @GetMapping
    public List<Transaction> getAll() {
        return service.getAllTransactions();
    }

    @GetMapping("/{id}")
    public Transaction getById(@PathVariable Long id) {
        return service.getTransactionById(id);
    }

    @PostMapping
    public Transaction create(@RequestBody Transaction transaction) {
        return service.saveTransaction(transaction);
    }

    @PutMapping("/{id}")
    public Transaction update(@PathVariable Long id, @RequestBody Transaction transaction) {
        return service.updateTransaction(id, transaction);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        service.deleteTransaction(id);
    }
}

🧩 INTERACTIONS MODULE
service/InteractionService.java
package com.sgc.crm.service;

import com.sgc.crm.entity.Interaction;
import java.util.List;

public interface InteractionService {
    List<Interaction> getAllInteractions();
    Interaction getInteractionById(Long id);
    Interaction saveInteraction(Interaction interaction);
    Interaction updateInteraction(Long id, Interaction interaction);
    void deleteInteraction(Long id);
}

service/impl/InteractionServiceImpl.java
package com.sgc.crm.service.impl;

import com.sgc.crm.entity.Interaction;
import com.sgc.crm.exception.ResourceNotFoundException;
import com.sgc.crm.repository.InteractionRepository;
import com.sgc.crm.service.InteractionService;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class InteractionServiceImpl implements InteractionService {

    private final InteractionRepository repository;

    public InteractionServiceImpl(InteractionRepository repository) {
        this.repository = repository;
    }

    @Override
    public List<Interaction> getAllInteractions() {
        return repository.findAll();
    }

    @Override
    public Interaction getInteractionById(Long id) {
        return repository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Interaction not found with id: " + id));
    }

    @Override
    public Interaction saveInteraction(Interaction interaction) {
        return repository.save(interaction);
    }

    @Override
    public Interaction updateInteraction(Long id, Interaction updated) {
        Interaction existing = getInteractionById(id);
        existing.setChannel(updated.getChannel());
        existing.setNotes(updated.getNotes());
        existing.setTimestamp(updated.getTimestamp());
        return repository.save(existing);
    }

    @Override
    public void deleteInteraction(Long id) {
        repository.deleteById(id);
    }
}

controller/InteractionController.java
package com.sgc.crm.controller;

import com.sgc.crm.entity.Interaction;
import com.sgc.crm.service.InteractionService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/interactions")
public class InteractionController {

    private final InteractionService service;

    public InteractionController(InteractionService service) {
        this.service = service;
    }

    @GetMapping
    public List<Interaction> getAll() {
        return service.getAllInteractions();
    }

    @GetMapping("/{id}")
    public Interaction getById(@PathVariable Long id) {
        return service.getInteractionById(id);
    }

    @PostMapping
    public Interaction create(@RequestBody Interaction interaction) {
        return service.saveInteraction(interaction);
    }

    @PutMapping("/{id}")
    public Interaction update(@PathVariable Long id, @RequestBody Interaction interaction) {
        return service.updateInteraction(id, interaction);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        service.deleteInteraction(id);
    }
}

🧩 TASKS MODULE
service/TaskService.java
package com.sgc.crm.service;

import com.sgc.crm.entity.Task;
import java.util.List;

public interface TaskService {
    List<Task> getAllTasks();
    Task getTaskById(Long id);
    Task saveTask(Task task);
    Task updateTask(Long id, Task task);
    void deleteTask(Long id);
}

service/impl/TaskServiceImpl.java
package com.sgc.crm.service.impl;

import com.sgc.crm.entity.Task;
import com.sgc.crm.exception.ResourceNotFoundException;
import com.sgc.crm.repository.TaskRepository;
import com.sgc.crm.service.TaskService;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TaskServiceImpl implements TaskService {

    private final TaskRepository repository;

    public TaskServiceImpl(TaskRepository repository) {
        this.repository = repository;
    }

    @Override
    public List<Task> getAllTasks() {
        return repository.findAll();
    }

    @Override
    public Task getTaskById(Long id) {
        return repository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Task not found with id: " + id));
    }

    @Override
    public Task saveTask(Task task) {
        return repository.save(task);
    }

    @Override
    public Task updateTask(Long id, Task updated) {
        Task existing = getTaskById(id);
        existing.setTitle(updated.getTitle());
        existing.setDescription(updated.getDescription());
        existing.setStatus(updated.getStatus());
        existing.setDueDate(updated.getDueDate());
        return repository.save(existing);
    }

    @Override
    public void deleteTask(Long id) {
        repository.deleteById(id);
    }
}

controller/TaskController.java
package com.sgc.crm.controller;

import com.sgc.crm.entity.Task;
import com.sgc.crm.service.TaskService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/tasks")
public class TaskController {

    private final TaskService service;

    public TaskController(TaskService service) {
        this.service = service;
    }

    @GetMapping
    public List<Task> getAll() {
        return service.getAllTasks();
    }

    @GetMapping("/{id}")
    public Task getById(@PathVariable Long id) {
        return service.getTaskById(id);
    }

    @PostMapping
    public Task create(@RequestBody Task task) {
        return service.saveTask(task);
    }

    @PutMapping("/{id}")
    public Task update(@PathVariable Long id, @RequestBody Task task) {
        return service.updateTask(id, task);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        service.deleteTask(id);
    }
}

⚠️ Exception Handling
exception/ResourceNotFoundException.java
package com.sgc.crm.exception;

public class ResourceNotFoundException extends RuntimeException {
    public ResourceNotFoundException(String message) {
        super(message);
    }
}

exception/GlobalExceptionHandler.java
package com.sgc.crm.exception;

import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.Map;

@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<?> handleNotFound(ResourceNotFoundException ex) {
        return new ResponseEntity<>(
                Map.of("timestamp", LocalDateTime.now(), "error", ex.getMessage()),
                HttpStatus.NOT_FOUND
        );
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<?> handleGeneral(Exception ex) {
        return new ResponseEntity<>(
                Map.of("timestamp", LocalDateTime.now(), "error", ex.getMessage()),
                HttpStatus.INTERNAL_SERVER_ERROR
        );
    }
}

🌱 Sample Data Loader
util/DataLoader.java
package com.sgc.crm.util;

import com.sgc.crm.entity.Customer;
import com.sgc.crm.repository.CustomerRepository;
import jakarta.annotation.PostConstruct;
import org.springframework.stereotype.Component;

@Component
public class DataLoader {
    private final CustomerRepository repo;

    public DataLoader(CustomerRepository repo) {
        this.repo = repo;
    }

    @PostConstruct
    public void init() {
        if (repo.count() == 0) {
            repo.save(new Customer(null, "John Doe", "john@sgc.com", "9876543210", "Mumbai", null, null));
            repo.save(new Customer(null, "Jane Smith", "jane@sgc.com", "9823456789", "Delhi", null, null));
        }
    }
}


🧩 1️⃣ CustomerRepository.java
package com.sgc.crm.repository;

import com.sgc.crm.entity.Customer;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface CustomerRepository extends JpaRepository<Customer, Long> {
}

🧩 2️⃣ TransactionRepository.java
package com.sgc.crm.repository;

import com.sgc.crm.entity.Transaction;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface TransactionRepository extends JpaRepository<Transaction, Long> {
}

🧩 3️⃣ InteractionRepository.java
package com.sgc.crm.repository;

import com.sgc.crm.entity.Interaction;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface InteractionRepository extends JpaRepository<Interaction, Long> {
}

🧩 4️⃣ TaskRepository.java
package com.sgc.crm.repository;

import com.sgc.crm.entity.Task;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface TaskRepository extends JpaRepository<Task, Long> {
}


CREATE TABLE customers (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    city VARCHAR(100),
    status VARCHAR(50),
    balance NUMERIC(15, 2)
);

CREATE TABLE transactions (
    id SERIAL PRIMARY KEY,
    customer_id INTEGER REFERENCES customers(id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL,
    amount NUMERIC(15, 2) NOT NULL,
    date DATE NOT NULL
);

CREATE TABLE interactions (
    id SERIAL PRIMARY KEY,
    customer_id INTEGER REFERENCES customers(id) ON DELETE CASCADE,
    type VARCHAR(50),
    notes TEXT,
    date DATE
);

CREATE TABLE tasks (
    id SERIAL PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    status VARCHAR(50),
    assigned_to VARCHAR(100)
);

-- ==============================================
-- ✅ SAMPLE DATA FOR SGC BANK CRM SYSTEM
-- ==============================================

-- 1️⃣ Customers
INSERT INTO customers (name, email, city, status, balance)
VALUES 
('John Doe', 'john.doe@sgcbank.com', 'New York', 'Active', 8500.00),
('Emma Watson', 'emma.watson@sgcbank.com', 'Los Angeles', 'Active', 12000.00),
('Michael Brown', 'michael.brown@sgcbank.com', 'Chicago', 'Inactive', 4300.50),
('Sophia Patel', 'sophia.patel@sgcbank.com', 'Houston', 'Active', 9200.75),
('Liam Smith', 'liam.smith@sgcbank.com', 'San Francisco', 'Active', 15200.00);

-- 2️⃣ Transactions
INSERT INTO transactions (customer_id, type, amount, date)
VALUES
(1, 'Deposit', 1500.00, '2025-10-01'),
(1, 'Withdrawal', 500.00, '2025-10-03'),
(2, 'Deposit', 2000.00, '2025-09-30'),
(3, 'Deposit', 800.00, '2025-10-02'),
(4, 'Withdrawal', 1000.00, '2025-10-04'),
(5, 'Deposit', 3000.00, '2025-10-05');

-- 3️⃣ Interactions
INSERT INTO interactions (customer_id, type, notes, date)
VALUES
(1, 'Call', 'Discussed new savings plan', '2025-10-06'),
(2, 'Email', 'Sent credit card offer', '2025-10-05'),
(3, 'Meeting', 'KYC verification pending', '2025-10-04'),
(4, 'Call', 'Follow-up on loan inquiry', '2025-10-07'),
(5, 'Email', 'Sent promotional mailer', '2025-10-08');

-- 4️⃣ Tasks
INSERT INTO tasks (title, status, assigned_to)
VALUES
('Follow-up with John Doe', 'Pending', 'Rachel'),
('Verify Emma Watson KYC', 'In Progress', 'David'),
('Send credit offer to Michael Brown', 'Completed', 'Ava'),
('Call Sophia Patel about loan', 'Pending', 'Liam'),
('Schedule meeting with Liam Smith', 'Pending', 'Noah');


src/main/java/com/sgc/crm/config/SecurityConfig.java

package com.sgc.crm.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf().disable() // disable CSRF for simplicity in dev
            .authorizeHttpRequests(auth -> auth
                // allow Swagger UI and OpenAPI endpoints
                .requestMatchers(
                    "/swagger-ui/**",
                    "/v3/api-docs/**",
                    "/v3/api-docs.yaml"
                ).permitAll()
                // allow your API endpoints (if you want)
                .requestMatchers("/api/**").permitAll()
                // everything else requires authentication
                .anyRequest().authenticated()
            )
            // disable login form for testing
            .formLogin().disable()
            .httpBasic().disable();

        return http.build();
    }
}
