3️⃣ Sample Service Test — Customers

File: src/test/java/com/sgc/crm/service/CustomerServiceTest.java

package com.sgc.crm.service;

import com.sgc.crm.entity.Customer;
import com.sgc.crm.exception.ResourceNotFoundException;
import com.sgc.crm.repository.CustomerRepository;
import com.sgc.crm.service.impl.CustomerServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class CustomerServiceTest {

    private CustomerRepository repository;
    private CustomerService service;

    @BeforeEach
    void setUp() {
        repository = mock(CustomerRepository.class);
        service = new CustomerServiceImpl(repository);
    }

    @Test
    void testGetAllCustomers() {
        Customer c1 = new Customer(1L, "Alice", "alice@sgc.com", "Mumbai", "Active", 5000.0);
        Customer c2 = new Customer(2L, "John", "john@sgc.com", "Delhi", "Inactive", 3000.0);
        when(repository.findAll()).thenReturn(Arrays.asList(c1, c2));

        List<Customer> customers = service.getAllCustomers();
        assertEquals(2, customers.size());
        verify(repository, times(1)).findAll();
    }

    @Test
    void testGetCustomerById_Success() {
        Customer c = new Customer(1L, "Alice", "alice@sgc.com", "Mumbai", "Active", 5000.0);
        when(repository.findById(1L)).thenReturn(Optional.of(c));

        Customer found = service.getCustomerById(1L);
        assertEquals("Alice", found.getName());
    }

    @Test
    void testGetCustomerById_NotFound() {
        when(repository.findById(1L)).thenReturn(Optional.empty());
        assertThrows(ResourceNotFoundException.class, () -> service.getCustomerById(1L));
    }

    @Test
    void testSaveCustomer() {
        Customer c = new Customer(null, "Bob", "bob@sgc.com", "Pune", "Active", 4000.0);
        when(repository.save(c)).thenReturn(new Customer(3L, "Bob", "bob@sgc.com", "Pune", "Active", 4000.0));

        Customer saved = service.saveCustomer(c);
        assertNotNull(saved.getId());
        assertEquals("Bob", saved.getName());
    }

    @Test
    void testUpdateCustomer() {
        Customer existing = new Customer(1L, "Alice", "alice@sgc.com", "Mumbai", "Active", 5000.0);
        Customer updated = new Customer(null, "Alice Updated", "alice@sgc.com", "Mumbai", "Inactive", 4500.0);

        when(repository.findById(1L)).thenReturn(Optional.of(existing));
        when(repository.save(existing)).thenReturn(existing);

        Customer result = service.updateCustomer(1L, updated);
        assertEquals("Alice Updated", result.getName());
        assertEquals("Inactive", result.getStatus());
    }

    @Test
    void testDeleteCustomer() {
        doNothing().when(repository).deleteById(1L);
        service.deleteCustomer(1L);
        verify(repository, times(1)).deleteById(1L);
    }
}

✅ TransactionServiceTest.java (matching your style)
package com.sgc.crm.service;

import com.sgc.crm.entity.Transaction;
import com.sgc.crm.exception.ResourceNotFoundException;
import com.sgc.crm.repository.TransactionRepository;
import com.sgc.crm.service.impl.TransactionServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class TransactionServiceTest {

    private TransactionRepository repository;
    private TransactionService service;

    @BeforeEach
    void setUp() {
        repository = mock(TransactionRepository.class);
        service = new TransactionServiceImpl(repository);
    }

    @Test
    void testGetAllTransactions() {
        Transaction t1 = new Transaction(1L, 1000.0, LocalDate.now(), "Payment received");
        Transaction t2 = new Transaction(2L, 2500.0, LocalDate.now(), "Invoice sent");
        when(repository.findAll()).thenReturn(Arrays.asList(t1, t2));

        List<Transaction> result = service.getAllTransactions();
        assertEquals(2, result.size());
        verify(repository, times(1)).findAll();
    }

    @Test
    void testGetTransactionById_Success() {
        Transaction t = new Transaction(1L, 1500.0, LocalDate.now(), "Refund");
        when(repository.findById(1L)).thenReturn(Optional.of(t));

        Transaction found = service.getTransactionById(1L);
        assertEquals(1500.0, found.getAmount());
    }

    @Test
    void testGetTransactionById_NotFound() {
        when(repository.findById(1L)).thenReturn(Optional.empty());
        assertThrows(ResourceNotFoundException.class, () -> service.getTransactionById(1L));
    }

    @Test
    void testSaveTransaction() {
        Transaction t = new Transaction(null, 2200.0, LocalDate.now(), "New transaction");
        when(repository.save(t)).thenReturn(new Transaction(3L, 2200.0, LocalDate.now(), "New transaction"));

        Transaction saved = service.saveTransaction(t);
        assertNotNull(saved.getId());
        assertEquals(2200.0, saved.getAmount());
    }

    @Test
    void testDeleteTransaction() {
        doNothing().when(repository).deleteById(1L);
        service.deleteTransaction(1L);
        verify(repository, times(1)).deleteById(1L);
    }
}

✅ InteractionServiceTest.java
package com.sgc.crm.service;

import com.sgc.crm.entity.Interaction;
import com.sgc.crm.exception.ResourceNotFoundException;
import com.sgc.crm.repository.InteractionRepository;
import com.sgc.crm.service.impl.InteractionServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class InteractionServiceTest {

    private InteractionRepository repository;
    private InteractionService service;

    @BeforeEach
    void setUp() {
        repository = mock(InteractionRepository.class);
        service = new InteractionServiceImpl(repository);
    }

    @Test
    void testGetAllInteractions() {
        Interaction i1 = new Interaction(1L, LocalDate.now(), "Email", "Follow-up mail sent");
        Interaction i2 = new Interaction(2L, LocalDate.now(), "Call", "Spoke with client");
        when(repository.findAll()).thenReturn(Arrays.asList(i1, i2));

        List<Interaction> result = service.getAllInteractions();
        assertEquals(2, result.size());
        verify(repository, times(1)).findAll();
    }

    @Test
    void testGetInteractionById_Success() {
        Interaction i = new Interaction(1L, LocalDate.now(), "Meeting", "In-person discussion");
        when(repository.findById(1L)).thenReturn(Optional.of(i));

        Interaction found = service.getInteractionById(1L);
        assertEquals("Meeting", found.getType());
    }

    @Test
    void testGetInteractionById_NotFound() {
        when(repository.findById(1L)).thenReturn(Optional.empty());
        assertThrows(ResourceNotFoundException.class, () -> service.getInteractionById(1L));
    }

    @Test
    void testSaveInteraction() {
        Interaction i = new Interaction(null, LocalDate.now(), "Email", "Test message");
        when(repository.save(i)).thenReturn(new Interaction(3L, LocalDate.now(), "Email", "Test message"));

        Interaction saved = service.saveInteraction(i);
        assertNotNull(saved.getId());
        assertEquals("Email", saved.getType());
    }

    @Test
    void testDeleteInteraction() {
        doNothing().when(repository).deleteById(1L);
        service.deleteInteraction(1L);
        verify(repository, times(1)).deleteById(1L);
    }
}

✅ TaskServiceTest.java
package com.sgc.crm.service;

import com.sgc.crm.entity.Task;
import com.sgc.crm.exception.ResourceNotFoundException;
import com.sgc.crm.repository.TaskRepository;
import com.sgc.crm.service.impl.TaskServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class TaskServiceTest {

    private TaskRepository repository;
    private TaskService service;

    @BeforeEach
    void setUp() {
        repository = mock(TaskRepository.class);
        service = new TaskServiceImpl(repository);
    }

    @Test
    void testGetAllTasks() {
        Task t1 = new Task(1L, "Follow-up call", LocalDate.now().plusDays(1), "Pending");
        Task t2 = new Task(2L, "Send email", LocalDate.now().plusDays(2), "Completed");
        when(repository.findAll()).thenReturn(Arrays.asList(t1, t2));

        List<Task> result = service.getAllTasks();
        assertEquals(2, result.size());
        verify(repository, times(1)).findAll();
    }

    @Test
    void testGetTaskById_Success() {
        Task t = new Task(1L, "Follow-up call", LocalDate.now(), "Pending");
        when(repository.findById(1L)).thenReturn(Optional.of(t));

        Task found = service.getTaskById(1L);
        assertEquals("Follow-up call", found.getTitle());
    }

    @Test
    void testGetTaskById_NotFound() {
        when(repository.findById(1L)).thenReturn(Optional.empty());
        assertThrows(ResourceNotFoundException.class, () -> service.getTaskById(1L));
    }

    @Test
    void testSaveTask() {
        Task t = new Task(null, "New task", LocalDate.now(), "In Progress");
        when(repository.save(t)).thenReturn(new Task(3L, "New task", LocalDate.now(), "In Progress"));

        Task saved = service.saveTask(t);
        assertNotNull(saved.getId());
        assertEquals("New task", saved.getTitle());
    }

    @Test
    void testDeleteTask() {
        doNothing().when(repository).deleteById(1L);
        service.deleteTask(1L);
        verify(repository, times(1)).deleteById(1L);
    }
}

//CustomerControllerTest

package com.sgc.crm.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.sgc.crm.entity.Customer;
import com.sgc.crm.service.CustomerService;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Collections;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.mockito.Mockito.*;

@WebMvcTest(CustomerController.class)
class CustomerControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private CustomerService service;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    void testGetAll() throws Exception {
        Customer c = new Customer(1L, "Alice", "alice@sgc.com", "Mumbai", "Active", 5000.0);
        when(service.getAllCustomers()).thenReturn(Collections.singletonList(c));

        mockMvc.perform(get("/api/customers"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].name").value("Alice"));
    }

    @Test
    void testCreate() throws Exception {
        Customer c = new Customer(null, "Bob", "bob@sgc.com", "Pune", "Active", 4000.0);
        Customer saved = new Customer(2L, "Bob", "bob@sgc.com", "Pune", "Active", 4000.0);
        when(service.saveCustomer(any(Customer.class))).thenReturn(saved);

        mockMvc.perform(post("/api/customers")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(c)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(2))
                .andExpect(jsonPath("$.name").value("Bob"));
    }
}

1️⃣ TransactionControllerTest.java
package com.sgc.crm.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.sgc.crm.entity.Transaction;
import com.sgc.crm.service.TransactionService;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.time.LocalDate;
import java.util.Collections;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(TransactionController.class)
class TransactionControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private TransactionService service;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    void testGetAllTransactions() throws Exception {
        Transaction t = new Transaction(1L, 1000.0, LocalDate.now(), "Deposit");
        when(service.getAllTransactions()).thenReturn(Collections.singletonList(t));

        mockMvc.perform(get("/api/transactions"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].type").value("Deposit"));
    }

    @Test
    void testCreateTransaction() throws Exception {
        Transaction input = new Transaction(null, 2000.0, LocalDate.now(), "Withdrawal");
        Transaction saved = new Transaction(2L, 2000.0, LocalDate.now(), "Withdrawal");
        when(service.saveTransaction(any(Transaction.class))).thenReturn(saved);

        mockMvc.perform(post("/api/transactions")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(input)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(2))
                .andExpect(jsonPath("$.type").value("Withdrawal"));
    }
}

🗣️ 2️⃣ InteractionControllerTest.java
package com.sgc.crm.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.sgc.crm.entity.Interaction;
import com.sgc.crm.service.InteractionService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.time.LocalDate;
import java.util.Collections;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(InteractionController.class)
class InteractionControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private InteractionService service;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    void testGetAllInteractions() throws Exception {
        Interaction i = new Interaction(1L, "Call", LocalDate.now(), "Discussed account details");
        when(service.getAllInteractions()).thenReturn(Collections.singletonList(i));

        mockMvc.perform(get("/api/interactions"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].type").value("Call"));
    }

    @Test
    void testCreateInteraction() throws Exception {
        Interaction input = new Interaction(null, "Email", LocalDate.now(), "Sent brochure");
        Interaction saved = new Interaction(2L, "Email", LocalDate.now(), "Sent brochure");
        when(service.saveInteraction(any(Interaction.class))).thenReturn(saved);

        mockMvc.perform(post("/api/interactions")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(input)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(2))
                .andExpect(jsonPath("$.type").value("Email"));
    }
}

✅ 3️⃣ TaskControllerTest.java
package com.sgc.crm.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.sgc.crm.entity.Task;
import com.sgc.crm.service.TaskService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.time.LocalDate;
import java.util.Collections;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(TaskController.class)
class TaskControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private TaskService service;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    void testGetAllTasks() throws Exception {
        Task t = new Task(1L, "Follow-up", "Pending", LocalDate.now().plusDays(2));
        when(service.getAllTasks()).thenReturn(Collections.singletonList(t));

        mockMvc.perform(get("/api/tasks"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].title").value("Follow-up"));
    }

    @Test
    void testCreateTask() throws Exception {
        Task input = new Task(null, "Call client", "In Progress", LocalDate.now().plusDays(1));
        Task saved = new Task(2L, "Call client", "In Progress", LocalDate.now().plusDays(1));
        when(service.saveTask(any(Task.class))).thenReturn(saved);

        mockMvc.perform(post("/api/tasks")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(input)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(2))
                .andExpect(jsonPath("$.title").value("Call client"));
    }
}
