3️⃣ Sample Service Test — Customers

File: src/test/java/com/sgc/crm/service/CustomerServiceTest.java

package com.sgc.crm.service;

import com.sgc.crm.entity.Customer;
import com.sgc.crm.exception.ResourceNotFoundException;
import com.sgc.crm.repository.CustomerRepository;
import com.sgc.crm.service.impl.CustomerServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class CustomerServiceTest {

    private CustomerRepository repository;
    private CustomerService service;

    @BeforeEach
    void setUp() {
        repository = mock(CustomerRepository.class);
        service = new CustomerServiceImpl(repository);
    }

    @Test
    void testGetAllCustomers() {
        Customer c1 = new Customer(1L, "Alice", "alice@sgc.com", "Mumbai", "Active", 5000.0);
        Customer c2 = new Customer(2L, "John", "john@sgc.com", "Delhi", "Inactive", 3000.0);
        when(repository.findAll()).thenReturn(Arrays.asList(c1, c2));

        List<Customer> customers = service.getAllCustomers();
        assertEquals(2, customers.size());
        verify(repository, times(1)).findAll();
    }

    @Test
    void testGetCustomerById_Success() {
        Customer c = new Customer(1L, "Alice", "alice@sgc.com", "Mumbai", "Active", 5000.0);
        when(repository.findById(1L)).thenReturn(Optional.of(c));

        Customer found = service.getCustomerById(1L);
        assertEquals("Alice", found.getName());
    }

    @Test
    void testGetCustomerById_NotFound() {
        when(repository.findById(1L)).thenReturn(Optional.empty());
        assertThrows(ResourceNotFoundException.class, () -> service.getCustomerById(1L));
    }

    @Test
    void testSaveCustomer() {
        Customer c = new Customer(null, "Bob", "bob@sgc.com", "Pune", "Active", 4000.0);
        when(repository.save(c)).thenReturn(new Customer(3L, "Bob", "bob@sgc.com", "Pune", "Active", 4000.0));

        Customer saved = service.saveCustomer(c);
        assertNotNull(saved.getId());
        assertEquals("Bob", saved.getName());
    }

    @Test
    void testUpdateCustomer() {
        Customer existing = new Customer(1L, "Alice", "alice@sgc.com", "Mumbai", "Active", 5000.0);
        Customer updated = new Customer(null, "Alice Updated", "alice@sgc.com", "Mumbai", "Inactive", 4500.0);

        when(repository.findById(1L)).thenReturn(Optional.of(existing));
        when(repository.save(existing)).thenReturn(existing);

        Customer result = service.updateCustomer(1L, updated);
        assertEquals("Alice Updated", result.getName());
        assertEquals("Inactive", result.getStatus());
    }

    @Test
    void testDeleteCustomer() {
        doNothing().when(repository).deleteById(1L);
        service.deleteCustomer(1L);
        verify(repository, times(1)).deleteById(1L);
    }
}


1️⃣ TransactionServiceTest.java
package com.sgc.crm.service;

import com.sgc.crm.entity.Transaction;
import com.sgc.crm.repository.TransactionRepository;
import com.sgc.crm.service.impl.TransactionServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class TransactionServiceTest {

    @Mock
    private TransactionRepository repository;

    @InjectMocks
    private TransactionServiceImpl service;

    private Transaction transaction;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        transaction = new Transaction();
        transaction.setId(1L);
        transaction.setAmount(1500.0);
        transaction.setDate(LocalDate.now());
        transaction.setDescription("Test Transaction");
    }

    @Test
    void testGetAllTransactions() {
        when(repository.findAll()).thenReturn(Arrays.asList(transaction));
        List<Transaction> result = service.getAllTransactions();
        assertEquals(1, result.size());
        verify(repository, times(1)).findAll();
    }

    @Test
    void testGetTransactionById() {
        when(repository.findById(1L)).thenReturn(Optional.of(transaction));
        Transaction result = service.getTransactionById(1L);
        assertEquals(1500.0, result.getAmount());
    }

    @Test
    void testSaveTransaction() {
        when(repository.save(any(Transaction.class))).thenReturn(transaction);
        Transaction saved = service.saveTransaction(transaction);
        assertNotNull(saved);
        verify(repository, times(1)).save(transaction);
    }

    @Test
    void testDeleteTransaction() {
        doNothing().when(repository).deleteById(1L);
        service.deleteTransaction(1L);
        verify(repository, times(1)).deleteById(1L);
    }
}

✅ 2️⃣ InteractionServiceTest.java
package com.sgc.crm.service;

import com.sgc.crm.entity.Interaction;
import com.sgc.crm.repository.InteractionRepository;
import com.sgc.crm.service.impl.InteractionServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class InteractionServiceTest {

    @Mock
    private InteractionRepository repository;

    @InjectMocks
    private InteractionServiceImpl service;

    private Interaction interaction;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        interaction = new Interaction();
        interaction.setId(1L);
        interaction.setDate(LocalDate.now());
        interaction.setType("Email");
        interaction.setNotes("Follow-up email sent");
    }

    @Test
    void testGetAllInteractions() {
        when(repository.findAll()).thenReturn(Arrays.asList(interaction));
        List<Interaction> result = service.getAllInteractions();
        assertEquals(1, result.size());
        verify(repository, times(1)).findAll();
    }

    @Test
    void testGetInteractionById() {
        when(repository.findById(1L)).thenReturn(Optional.of(interaction));
        Interaction result = service.getInteractionById(1L);
        assertEquals("Email", result.getType());
    }

    @Test
    void testSaveInteraction() {
        when(repository.save(any(Interaction.class))).thenReturn(interaction);
        Interaction saved = service.saveInteraction(interaction);
        assertNotNull(saved);
        verify(repository, times(1)).save(interaction);
    }

    @Test
    void testDeleteInteraction() {
        doNothing().when(repository).deleteById(1L);
        service.deleteInteraction(1L);
        verify(repository, times(1)).deleteById(1L);
    }
}

✅ 3️⃣ TaskServiceTest.java
package com.sgc.crm.service;

import com.sgc.crm.entity.Task;
import com.sgc.crm.repository.TaskRepository;
import com.sgc.crm.service.impl.TaskServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class TaskServiceTest {

    @Mock
    private TaskRepository repository;

    @InjectMocks
    private TaskServiceImpl service;

    private Task task;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        task = new Task();
        task.setId(1L);
        task.setTitle("Follow-up Call");
        task.setDueDate(LocalDate.now().plusDays(2));
        task.setStatus("Pending");
    }

    @Test
    void testGetAllTasks() {
        when(repository.findAll()).thenReturn(Arrays.asList(task));
        List<Task> result = service.getAllTasks();
        assertEquals(1, result.size());
        verify(repository, times(1)).findAll();
    }

    @Test
    void testGetTaskById() {
        when(repository.findById(1L)).thenReturn(Optional.of(task));
        Task result = service.getTaskById(1L);
        assertEquals("Follow-up Call", result.getTitle());
    }

    @Test
    void testSaveTask() {
        when(repository.save(any(Task.class))).thenReturn(task);
        Task saved = service.saveTask(task);
        assertNotNull(saved);
        verify(repository, times(1)).save(task);
    }

    @Test
    void testDeleteTask() {
        doNothing().when(repository).deleteById(1L);
        service.deleteTask(1L);
        verify(repository, times(1)).deleteById(1L);
    }
}
